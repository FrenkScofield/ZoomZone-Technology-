// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZoomZone.DAL;

namespace ZoomZone.Migrations
{
    [DbContext(typeof(ZZContext))]
    [Migration("20191219144509_ProductTableDiscountRowAddNullbl")]
    partial class ProductTableDiscountRowAddNullbl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ZoomZone.Models.Advertising", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Advertisings");

                    b.HasData(
                        new { Id = 1, Image = "banner20.jpg", Title = "AngellaWhite" },
                        new { Id = 2, Image = "banner24.jpg", Title = "LisaaAnn" }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SurName")
                        .HasMaxLength(200);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ZoomZone.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new { Id = 11, Name = "Iphone" },
                        new { Id = 12, Name = "HTC" },
                        new { Id = 13, Name = "Lenova" },
                        new { Id = 14, Name = "Samsung" },
                        new { Id = 15, Name = "MacBook" },
                        new { Id = 16, Name = "Dell" }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.CatBraPivot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("CategoryId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CatBraPivots");

                    b.HasData(
                        new { Id = 11, BrandId = 11, CategoryId = 11 },
                        new { Id = 12, BrandId = 12, CategoryId = 11 },
                        new { Id = 13, BrandId = 13, CategoryId = 12 },
                        new { Id = 14, BrandId = 14, CategoryId = 12 },
                        new { Id = 15, BrandId = 15, CategoryId = 13 },
                        new { Id = 16, BrandId = 16, CategoryId = 13 }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 11, Name = "Phone" },
                        new { Id = 12, Name = "Tablet" },
                        new { Id = 13, Name = "NoteBook" }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new { Id = 1, Name = "Black" },
                        new { Id = 2, Name = "White" },
                        new { Id = 3, Name = "Red" },
                        new { Id = 4, Name = "green" },
                        new { Id = 5, Name = "Yellow" },
                        new { Id = 6, Name = "Purple" },
                        new { Id = 7, Name = "Brown" }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new { Id = 11, ImagePath = "1.jpg", ProductId = 11 },
                        new { Id = 12, ImagePath = "2.jpg", ProductId = 12 },
                        new { Id = 13, ImagePath = "3.jpg", ProductId = 13 },
                        new { Id = 14, ImagePath = "4.jpg", ProductId = 14 },
                        new { Id = 15, ImagePath = "5.jpg", ProductId = 15 },
                        new { Id = 16, ImagePath = "6.jpg", ProductId = 16 },
                        new { Id = 17, ImagePath = "7.jpg", ProductId = 17 },
                        new { Id = 18, ImagePath = "1.jpg", ProductId = 18 },
                        new { Id = 19, ImagePath = "2.jpg", ProductId = 19 },
                        new { Id = 20, ImagePath = "3.jpg", ProductId = 20 }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ZoomZone.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ZoomZone.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ZoomZone.Models.ProColPivot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProColPivots");

                    b.HasData(
                        new { Id = 1, ColorId = 1, ProductId = 11 },
                        new { Id = 2, ColorId = 2, ProductId = 11 },
                        new { Id = 3, ColorId = 3, ProductId = 12 },
                        new { Id = 4, ColorId = 4, ProductId = 12 },
                        new { Id = 5, ColorId = 5, ProductId = 13 },
                        new { Id = 6, ColorId = 6, ProductId = 13 },
                        new { Id = 7, ColorId = 7, ProductId = 14 },
                        new { Id = 8, ColorId = 1, ProductId = 14 },
                        new { Id = 9, ColorId = 1, ProductId = 15 },
                        new { Id = 10, ColorId = 3, ProductId = 15 },
                        new { Id = 11, ColorId = 6, ProductId = 16 }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Batary")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Camera")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CatBraPivotId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<byte?>("Discount");

                    b.Property<string>("DisplaySize")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Ghz")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Price");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProductionDate")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("VideoCart")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CatBraPivotId");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 11, Batary = "3000", Camera = "12 x 12 x 12", CatBraPivotId = 11, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)10, DisplaySize = "6 inch", Ghz = "2.3", Memory = "128 Gb", Name = "11 Pro", OS = "ISO 13", Price = 2300m, Processor = "A9", ProductionDate = "17.02.2019", RAM = "4 Gb" },
                        new { Id = 12, Batary = "2400", Camera = "12 x 12", CatBraPivotId = 11, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)12, DisplaySize = "5.8 inch", Ghz = "2.0", Memory = "64 Gb", Name = "X", OS = "ISO 12", Price = 1800m, Processor = "A8", ProductionDate = "20.02.2018", RAM = "3 Gb" },
                        new { Id = 13, Batary = "3300", Camera = "16 UPx", CatBraPivotId = 12, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)15, DisplaySize = "6.3 inch", Ghz = "2.5", Memory = "128 Gb", Name = "U11", OS = "Androit 8.6", Price = 850m, Processor = "Snapdragon 890", ProductionDate = "17.02.2015", RAM = "6 Gb" },
                        new { Id = 14, Batary = "3100", Camera = "20 MPx", CatBraPivotId = 12, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)16, DisplaySize = "5.7 inch", Ghz = "2.2", Memory = "64 Gb", Name = "M10", OS = "Androit 7.1", Price = 600m, Processor = "Snapdragon 820", ProductionDate = "17.02.2014", RAM = "4 Gb" },
                        new { Id = 15, Batary = "2800", Camera = "16 MPx", CatBraPivotId = 13, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)17, DisplaySize = "7.7 inch", Ghz = "1.3", Memory = "8 Gb", Name = "Tab 2 A7", OS = "Androit 4.4", Price = 400m, Processor = "MediaTek", ProductionDate = "17.02.2012", RAM = "1 Gb" },
                        new { Id = 16, Batary = "3400", Camera = "20 MPx", CatBraPivotId = 13, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)18, DisplaySize = "8.0 inch", Ghz = "2.0", Memory = "34 Gb", Name = "Tab A10", OS = "Androit 4.7", Price = 700m, Processor = "MediaTek", ProductionDate = "17.02.2011", RAM = "3 Gb" },
                        new { Id = 17, Batary = "2400", Camera = "10 MPx", CatBraPivotId = 14, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)20, DisplaySize = "7 inch", Ghz = "1.8", Memory = "32 Gb", Name = "Tab A", OS = "Androit 5", Price = 350m, Processor = "quad-core", ProductionDate = "17.02.2013", RAM = "2 Gb" },
                        new { Id = 18, Batary = "7800", Camera = "13 MPx", CatBraPivotId = 14, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)50, DisplaySize = "10.5 inch", Ghz = "1.7", Memory = "64 Gb", Name = "TTab S5e", OS = "Androit 9", Price = 400m, Processor = "Qualcomm Snapdragon 670", ProductionDate = "17.02.2017", RAM = "4 Gb" },
                        new { Id = 19, Batary = "12800", Camera = "10 MPx", CatBraPivotId = 15, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)60, DisplaySize = "15 inch", Ghz = "3.8", Memory = "1 SSD", Name = "Pro", OS = "Macos Catalina 10.15", Price = 5000m, Processor = "Inetl 9", ProductionDate = "17.02.2019", RAM = "16 Gb", VideoCart = "4 Gb" },
                        new { Id = 20, Batary = "8800", Camera = "8 MPx", CatBraPivotId = 16, DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl", Discount = (byte)30, DisplaySize = "15.6 inch", Ghz = "2.8", Memory = "500 Gb", Name = "g3-3590", OS = "Windows 10", Price = 1560m, Processor = "Intel 7", ProductionDate = "17.02.2016", RAM = "8 Gb", VideoCart = "2 GB" }
                    );
                });

            modelBuilder.Entity("ZoomZone.Models.SliderHome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SImage")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SliderHomes");

                    b.HasData(
                        new { Id = 1, SImage = "slider4.jpg" },
                        new { Id = 2, SImage = "slider5.jpg" },
                        new { Id = 3, SImage = "slider7.jpg" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ZoomZone.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ZoomZone.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZoomZone.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ZoomZone.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZoomZone.Models.CatBraPivot", b =>
                {
                    b.HasOne("ZoomZone.Models.Brand", "Brand")
                        .WithMany("CatBraPivots")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZoomZone.Models.Category", "Category")
                        .WithMany("CatBraPivots")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZoomZone.Models.Images", b =>
                {
                    b.HasOne("ZoomZone.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZoomZone.Models.Like", b =>
                {
                    b.HasOne("ZoomZone.Models.Product", "Product")
                        .WithMany("Likes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZoomZone.Models.AppUser", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ZoomZone.Models.Order", b =>
                {
                    b.HasOne("ZoomZone.Models.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ZoomZone.Models.OrderDetail", b =>
                {
                    b.HasOne("ZoomZone.Models.Order", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZoomZone.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZoomZone.Models.ProColPivot", b =>
                {
                    b.HasOne("ZoomZone.Models.Color", "Color")
                        .WithMany("ProColPivots")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZoomZone.Models.Product", "Product")
                        .WithMany("ProColPivots")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZoomZone.Models.Product", b =>
                {
                    b.HasOne("ZoomZone.Models.CatBraPivot", "CatBraPivot")
                        .WithMany("Products")
                        .HasForeignKey("CatBraPivotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
